exit
users.pluck(:id)
users.length
users.count
users
exitusers
exit
users.first
users.pluck(:name, :event_count)
users
query
exit
q
exit
self.orders
self
pie_types_hash
exit
pie_types_hash
continue
exit
expect(event.restaurant).to eq(restaurant)
event.restaurant = restaurant
event.restaurant
event
exit
event.restaurant.pizzas.map {|za| za.topping}
event.restaurant.pizzas.all
event.restaurant.pizzas
event.restaurant
event
continue
@event = Event.new(event_params)
event_params
self
date
Event.where(date: Time.now.day) 
Event.where(date: #{Time.now.day}) 
Event.where(date: #{Time.now.day}") 
Event.where(date.day: #{Time.now.day}") 
Event.where("events.date = Time.now.day")
Event.where("events.date == Time.now.")
Event.where("event.date == Time.now.day")
Event.where("events.date == Time.now.day")
Event.where("events.date.day == Time.now.day")
Event.where("events.date.month == #{Time.now.month}")
Event.where("events.date.month == #{Time.now.month})
Event.where
events.where
self.all
Self.all
exit
Event.all.count
@events.count
@events
exit
selfexit
self.all
self
Event.connection
self
exit
<<<<<<< HEAD
page.body
exit
page.content
page
exit
User.all
Event.all
exit
<<<<<<< HEAD
=======
>>>>>>> 728b183dfa29fa5f9868043c807a9df272674a27
Time.now >= self.deadline && Time.now < self.date
Time.now < self.deadline
Time.now > self.deadline
end
if Time.now > self.deadline
(Time.now..self.date) == Time.now
(self.deadline..self.date) == Time.now
(self.deadline..self.date).include?(Time.now)
(self.deadline..self.date) == Time.now
(self.deadline..self.date)
self.deadline
exit
@event.orders.map {|order| order.user.name}
@event.orders.map {|order| order.user.name]
@event.orders
@event
exit
@event
params
exit
params
exit
<<<<<<< HEAD
order.event.date.time.current
order.event.date.time
order.event.date.date
order.event.date.time
order.event.date
order.user.email
order.email
order.slices.count
order.slicesc.count
order.slices
order.event.title
order.title
order.user.email
order.user
self.orders.count
self.orders
self
order
self
self.pizza
self.slices
self.orders
self
exit
=======
<<<<<<< HEAD
=======
<<<<<<< HEAD
total
exit
continue
item_type
continue
exit
total
continue
total
continue
total
continue
total
exit
total
continue
total_slices_price(item_hash, total)
item_hash
item_type
total
continue
total_pies_price(item_hash, total)
total
total_pies_price(item_hash)
item_hash
item_type
exit
total
item_type
continue
total
item_type
continue
total
continue
total
exit
Pizza.last
Pizza.all
Pizza.find_by_topping("cheese").price
slices_pies
total
exit
num_slices
number
continue
number
continue
exit
num_pies
topping
num_slices
continue
num_pies
num_slices
num_sices
exit
event2.determine_slices_pies
exit
event2.get_pie_types_counts_hash
event2.determine_slices_pies
event2.orders
event2.slices
event2.total_price
event2
exit
event2.slices
event2.total_price
event.total_price
event2.slices
event
event.slices
event2
event
exit
event2.errors
event2
exit
self.determine_slices_pies
event.determine_slices_pies
item_type
total
exit
total
exit
self.total_price
self.determine_slices_pies
self.get_pie_types_counts_hash
self
event.get_pie_types_counts_hash
event.orders
total
otal
exit
total
continue
total
continue
total
exit
event.slices
slices_hash
exit
sum
slices
pies
continue
sum
hash
exit
event.slices.count
event = Event.last
self.slices.map{|slice| slice.pizza.topping}
event.slices.map{|slice| slice.pizza.topping}
determine_slices_pies
exit
>>>>>>> event-price
=======
>>>>>>> 728b183dfa29fa5f9868043c807a9df272674a27
self.orders.empty?
self.orders.present?
self.orders.nil?
self.orders
event
self
continue
pies_slices_hash
continue
pies_slices_hash
continue
pies_slices_hash
